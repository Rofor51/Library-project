{"ast":null,"code":"/* eslint complexity:[0,8] max-statements:[0,21] */\nvar util = require('./util');\n\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar storageUtil = require('./storageUtil');\n\nvar Q = require('q');\n\nvar Emitter = require('tiny-emitter');\n\nvar config = require('./config');\n\nvar storageBuilder = require('./storageBuilder');\n\nfunction emitExpired(tokenMgmtRef, key, token) {\n  tokenMgmtRef.emitter.emit('expired', key, token);\n}\n\nfunction clearRefreshTimeout(tokenMgmtRef, key) {\n  clearTimeout(tokenMgmtRef.refreshTimeouts[key]);\n  delete tokenMgmtRef.refreshTimeouts[key];\n}\n\nfunction clearRefreshTimeoutAll(tokenMgmtRef) {\n  var refreshTimeouts = tokenMgmtRef.refreshTimeouts;\n\n  for (var key in refreshTimeouts) {\n    if (!refreshTimeouts.hasOwnProperty(key)) {\n      continue;\n    }\n\n    clearRefreshTimeout(tokenMgmtRef, key);\n  }\n\n  tokenMgmtRef.refreshTimeouts = {};\n}\n\nfunction setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token) {\n  var refreshWait = token.expiresAt * 1000 - Date.now();\n\n  if (refreshWait < 0) {\n    // Already expired\n    refreshWait = 0;\n  }\n\n  var refreshTimeout = setTimeout(function () {\n    if (tokenMgmtRef.autoRefresh) {\n      return refresh(sdk, tokenMgmtRef, storage, key);\n    } else if (token.expiresAt * 1000 <= Date.now()) {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n  }, refreshWait); // Clear any existing timeout\n\n  clearRefreshTimeout(tokenMgmtRef, key); // Add a new timeout\n\n  tokenMgmtRef.refreshTimeouts[key] = refreshTimeout;\n}\n\nfunction setRefreshTimeoutAll(sdk, tokenMgmtRef, storage) {\n  try {\n    var tokenStorage = storage.getStorage();\n  } catch (e) {\n    // Any errors thrown on instantiation will not be caught,\n    // because there are no listeners yet\n    tokenMgmtRef.emitter.emit('error', e);\n    return;\n  }\n\n  for (var key in tokenStorage) {\n    if (!tokenStorage.hasOwnProperty(key)) {\n      continue;\n    }\n\n    var token = tokenStorage[key];\n    setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n  }\n}\n\nfunction add(sdk, tokenMgmtRef, storage, key, token) {\n  var tokenStorage = storage.getStorage();\n\n  if (!util.isObject(token) || !token.scopes || !token.expiresAt && token.expiresAt !== 0 || !token.idToken && !token.accessToken) {\n    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');\n  }\n\n  tokenStorage[key] = token;\n  storage.setStorage(tokenStorage);\n  setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n}\n\nfunction get(storage, key) {\n  var tokenStorage = storage.getStorage();\n  return tokenStorage[key];\n}\n\nfunction remove(tokenMgmtRef, storage, key) {\n  // Clear any listener for this token\n  clearRefreshTimeout(tokenMgmtRef, key); // Remove it from storage\n\n  var tokenStorage = storage.getStorage();\n  delete tokenStorage[key];\n  storage.setStorage(tokenStorage);\n}\n\nfunction refresh(sdk, tokenMgmtRef, storage, key) {\n  try {\n    var token = get(storage, key);\n\n    if (!token) {\n      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);\n    }\n  } catch (e) {\n    return Q.reject(e);\n  } // Remove existing autoRefresh timeout for this key\n\n\n  clearRefreshTimeout(tokenMgmtRef, key);\n  return sdk.token.refresh(token).then(function (freshToken) {\n    add(sdk, tokenMgmtRef, storage, key, freshToken);\n    tokenMgmtRef.emitter.emit('refreshed', key, freshToken, token);\n    return freshToken;\n  }).fail(function (err) {\n    if (err.name === 'OAuthError') {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n\n    throw err;\n  });\n}\n\nfunction clear(tokenMgmtRef, storage) {\n  clearRefreshTimeoutAll(tokenMgmtRef);\n  storage.clearStorage();\n}\n\nfunction TokenManager(sdk, options) {\n  options = options || {};\n  options.storage = options.storage || 'localStorage';\n\n  if (!options.autoRefresh && options.autoRefresh !== false) {\n    options.autoRefresh = true;\n  }\n\n  if (options.storage === 'localStorage' && !storageUtil.browserHasLocalStorage()) {\n    util.warn('This browser doesn\\'t support localStorage. Switching to sessionStorage.');\n    options.storage = 'sessionStorage';\n  }\n\n  if (options.storage === 'sessionStorage' && !storageUtil.browserHasSessionStorage()) {\n    util.warn('This browser doesn\\'t support sessionStorage. Switching to cookie-based storage.');\n    options.storage = 'cookie';\n  }\n\n  var storage;\n\n  switch (options.storage) {\n    case 'localStorage':\n      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);\n      break;\n\n    case 'sessionStorage':\n      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);\n      break;\n\n    case 'cookie':\n      storage = storageBuilder(storageUtil.getCookieStorage(), config.TOKEN_STORAGE_NAME);\n      break;\n\n    default:\n      throw new AuthSdkError('Unrecognized storage option');\n  }\n\n  var tokenMgmtRef = {\n    emitter: new Emitter(),\n    autoRefresh: options.autoRefresh,\n    refreshTimeouts: {}\n  };\n  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);\n  this.get = util.bind(get, this, storage);\n  this.remove = util.bind(remove, this, tokenMgmtRef, storage);\n  this.clear = util.bind(clear, this, tokenMgmtRef, storage);\n  this.refresh = util.bind(refresh, this, sdk, tokenMgmtRef, storage);\n  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);\n  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);\n  setRefreshTimeoutAll(sdk, tokenMgmtRef, storage);\n}\n\nmodule.exports = TokenManager;","map":{"version":3,"sources":["C:/Users/robin/Desktop/Library/Library-React/my-app/node_modules/@okta/okta-signin-widget/node_modules/@okta/okta-auth-js/lib/TokenManager.js"],"names":["util","require","AuthSdkError","storageUtil","Q","Emitter","config","storageBuilder","emitExpired","tokenMgmtRef","key","token","emitter","emit","clearRefreshTimeout","clearTimeout","refreshTimeouts","clearRefreshTimeoutAll","hasOwnProperty","setRefreshTimeout","sdk","storage","refreshWait","expiresAt","Date","now","refreshTimeout","setTimeout","autoRefresh","refresh","remove","setRefreshTimeoutAll","tokenStorage","getStorage","e","add","isObject","scopes","idToken","accessToken","setStorage","get","reject","then","freshToken","fail","err","name","clear","clearStorage","TokenManager","options","browserHasLocalStorage","warn","browserHasSessionStorage","localStorage","TOKEN_STORAGE_NAME","sessionStorage","getCookieStorage","bind","on","off","module","exports"],"mappings":"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","sourcesContent":["/* eslint complexity:[0,8] max-statements:[0,21] */\nvar util = require('./util');\nvar AuthSdkError = require('./errors/AuthSdkError');\nvar storageUtil = require('./storageUtil');\nvar Q = require('q');\nvar Emitter = require('tiny-emitter');\nvar config = require('./config');\nvar storageBuilder = require('./storageBuilder');\n\nfunction emitExpired(tokenMgmtRef, key, token) {\n  tokenMgmtRef.emitter.emit('expired', key, token);\n}\n\nfunction clearRefreshTimeout(tokenMgmtRef, key) {\n  clearTimeout(tokenMgmtRef.refreshTimeouts[key]);\n  delete tokenMgmtRef.refreshTimeouts[key];\n}\n\nfunction clearRefreshTimeoutAll(tokenMgmtRef) {\n  var refreshTimeouts = tokenMgmtRef.refreshTimeouts;\n  for(var key in refreshTimeouts) {\n    if (!refreshTimeouts.hasOwnProperty(key)) {\n      continue;\n    }\n    clearRefreshTimeout(tokenMgmtRef, key);\n  }\n  tokenMgmtRef.refreshTimeouts = {};\n}\n\nfunction setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token) {\n  var refreshWait = (token.expiresAt * 1000) - Date.now();\n  if (refreshWait < 0) {\n    // Already expired\n    refreshWait = 0;\n  }\n  var refreshTimeout = setTimeout(function() {\n    if (tokenMgmtRef.autoRefresh) {\n      return refresh(sdk, tokenMgmtRef, storage, key);\n    } else if (token.expiresAt * 1000 <= Date.now()) {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n  }, refreshWait);\n\n  // Clear any existing timeout\n  clearRefreshTimeout(tokenMgmtRef, key);\n\n  // Add a new timeout\n  tokenMgmtRef.refreshTimeouts[key] = refreshTimeout;\n}\n\nfunction setRefreshTimeoutAll(sdk, tokenMgmtRef, storage) {\n  try {\n    var tokenStorage = storage.getStorage();\n  } catch(e) {\n    // Any errors thrown on instantiation will not be caught,\n    // because there are no listeners yet\n    tokenMgmtRef.emitter.emit('error', e);\n    return;\n  }\n\n  for(var key in tokenStorage) {\n    if (!tokenStorage.hasOwnProperty(key)) {\n      continue;\n    }\n    var token = tokenStorage[key];\n    setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n  }\n}\n\nfunction add(sdk, tokenMgmtRef, storage, key, token) {\n  var tokenStorage = storage.getStorage();\n  if (!util.isObject(token) ||\n      !token.scopes ||\n      (!token.expiresAt && token.expiresAt !== 0) ||\n      (!token.idToken && !token.accessToken)) {\n    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');\n  }\n  tokenStorage[key] = token;\n  storage.setStorage(tokenStorage);\n  setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n}\n\nfunction get(storage, key) {\n  var tokenStorage = storage.getStorage();\n  return tokenStorage[key];\n}\n\nfunction remove(tokenMgmtRef, storage, key) {\n  // Clear any listener for this token\n  clearRefreshTimeout(tokenMgmtRef, key);\n\n  // Remove it from storage\n  var tokenStorage = storage.getStorage();\n  delete tokenStorage[key];\n  storage.setStorage(tokenStorage);\n}\n\nfunction refresh(sdk, tokenMgmtRef, storage, key) {\n  try {\n    var token = get(storage, key);\n    if (!token) {\n      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);\n    }\n  } catch (e) {\n    return Q.reject(e);\n  }\n\n  // Remove existing autoRefresh timeout for this key\n  clearRefreshTimeout(tokenMgmtRef, key);\n\n  return sdk.token.refresh(token)\n  .then(function(freshToken) {\n    add(sdk, tokenMgmtRef, storage, key, freshToken);\n    tokenMgmtRef.emitter.emit('refreshed', key, freshToken, token);\n    return freshToken;\n  })\n  .fail(function(err) {\n    if (err.name === 'OAuthError') {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n    throw err;\n  });\n}\n\nfunction clear(tokenMgmtRef, storage) {\n  clearRefreshTimeoutAll(tokenMgmtRef);\n  storage.clearStorage();\n}\n\nfunction TokenManager(sdk, options) {\n  options = options || {};\n  options.storage = options.storage || 'localStorage';\n  if (!options.autoRefresh && options.autoRefresh !== false) {\n    options.autoRefresh = true;\n  }\n\n  if (options.storage === 'localStorage' && !storageUtil.browserHasLocalStorage()) {\n    util.warn('This browser doesn\\'t support localStorage. Switching to sessionStorage.');\n    options.storage = 'sessionStorage';\n  }\n\n  if (options.storage === 'sessionStorage' && !storageUtil.browserHasSessionStorage()) {\n    util.warn('This browser doesn\\'t support sessionStorage. Switching to cookie-based storage.');\n    options.storage = 'cookie';\n  }\n\n  var storage;\n  switch(options.storage) {\n    case 'localStorage':\n      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);\n      break;\n    case 'sessionStorage':\n      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);\n      break;\n    case 'cookie':\n      storage = storageBuilder(storageUtil.getCookieStorage(), config.TOKEN_STORAGE_NAME);\n      break;\n    default:\n      throw new AuthSdkError('Unrecognized storage option');\n  }\n\n  var tokenMgmtRef = {\n    emitter: new Emitter(),\n    autoRefresh: options.autoRefresh,\n    refreshTimeouts: {}\n  };\n\n  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);\n  this.get = util.bind(get, this, storage);\n  this.remove = util.bind(remove, this, tokenMgmtRef, storage);\n  this.clear = util.bind(clear, this, tokenMgmtRef, storage);\n  this.refresh = util.bind(refresh, this, sdk, tokenMgmtRef, storage);\n  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);\n  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);\n  \n  setRefreshTimeoutAll(sdk, tokenMgmtRef, storage);\n}\n\nmodule.exports = TokenManager;\n"]},"metadata":{},"sourceType":"script"}