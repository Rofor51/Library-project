{"ast":null,"code":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { userInfo } from '../auth/UserInformation';\n\nconst Home = () => {\n  const {\n    authState,\n    authService\n  } = useOktaAuth();\n  const [userInfo, setUserInfo] = useState(null);\n  useEffect(() => {\n    if (!authState.isAuthenticated) {\n      // When user isn't authenticated, forget any user info\n      setUserInfo(null);\n    } else {\n      authService.getUser().then(info => {\n        setUserInfo(info);\n      });\n    }\n  }, [authState, authService]); // Update if authState changes\n};\n\nexport const user = () => {\n  return () => {\n    \"YO!\";\n  };\n};","map":{"version":3,"sources":["C:/Users/robin/Desktop/Library/Library-React/my-app/src/components/auth/UserInformation.js"],"names":["React","Link","useOktaAuth","userInfo","Home","authState","authService","setUserInfo","useState","useEffect","isAuthenticated","getUser","then","info","user"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAAQC,QAAR,QAAuB,yBAAvB;;AAGA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BJ,WAAW,EAA9C;AACA,QAAM,CAACC,QAAD,EAAWI,WAAX,IAA0BC,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACJ,SAAS,CAACK,eAAf,EAAgC;AAC9B;AACAH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHD,MAGO;AACLD,MAAAA,WAAW,CAACK,OAAZ,GAAsBC,IAAtB,CAA2BC,IAAI,IAAI;AACjCN,QAAAA,WAAW,CAACM,IAAD,CAAX;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACR,SAAD,EAAYC,WAAZ,CATM,CAAT,CAJe,CAae;AAEjC,CAfD;;AAiBA,OAAO,MAAMQ,IAAI,GAAG,MAAK;AACrB,SAAO,MAAM;AACV;AACF,GAFD;AAGH,CAJM","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\nimport {userInfo} from '../auth/UserInformation'\r\n\r\n\r\nconst Home = () => {\r\n    const { authState, authService } = useOktaAuth();\r\n    const [userInfo, setUserInfo] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      if (!authState.isAuthenticated) {\r\n        // When user isn't authenticated, forget any user info\r\n        setUserInfo(null);\r\n      } else {\r\n        authService.getUser().then(info => {\r\n          setUserInfo(info);\r\n        });\r\n      }\r\n    }, [authState, authService]); // Update if authState changes\r\n  \r\n}\r\n\r\nexport const user = () =>{\r\n    return () => {\r\n       \"YO!\"\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}