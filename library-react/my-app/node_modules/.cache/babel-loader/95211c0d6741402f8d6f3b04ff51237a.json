{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useOktaAuth } from \"@okta/okta-react\";\nexport const AuthInformation = () => {\n  const {\n    authState,\n    authService\n  } = useOktaAuth();\n  const [authenticated, setAuthenticated] = useState(null);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    authState.isAuthenticated().then(isAuthenticated => {\n      if (isAuthenticated !== authenticated) {\n        setAuthenticated(isAuthenticated);\n      }\n    });\n  });\n  useEffect(() => {\n    if (authenticated) {\n      auth.getUser().then(setUser);\n    } else {\n      setUser(null);\n    }\n  }, [authenticated]);\n  return [authenticated, user];\n};","map":{"version":3,"sources":["C:/Users/robin/Desktop/Library/Library-React/my-app/src/components/auth/AuthInformation.js"],"names":["useState","useEffect","useOktaAuth","AuthInformation","authState","authService","authenticated","setAuthenticated","user","setUser","isAuthenticated","then","auth","getUser"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACpC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BH,WAAW,EAA9C;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AAECC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,SAAS,CAACM,eAAV,GAA4BC,IAA5B,CAAiCD,eAAe,IAAI;AAClD,UAAIA,eAAe,KAAKJ,aAAxB,EAAuC;AACrCC,QAAAA,gBAAgB,CAACG,eAAD,CAAhB;AACD;AACF,KAJD;AAKD,GANQ,CAAT;AAQAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,aAAJ,EAAmB;AACjBM,MAAAA,IAAI,CAACC,OAAL,GAAeF,IAAf,CAAoBF,OAApB;AACD,KAFD,MAEO;AACLA,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GANQ,EAMN,CAACH,aAAD,CANM,CAAT;AAQA,SAAO,CAACA,aAAD,EAAgBE,IAAhB,CAAP;AACD,CAtBM","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useOktaAuth } from \"@okta/okta-react\";\r\n\r\nexport const AuthInformation = () => {\r\n const { authState, authService } = useOktaAuth();\r\n const [authenticated, setAuthenticated] = useState(null);\r\n const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    authState.isAuthenticated().then(isAuthenticated => {\r\n      if (isAuthenticated !== authenticated) {\r\n        setAuthenticated(isAuthenticated);\r\n      }\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (authenticated) {\r\n      auth.getUser().then(setUser);\r\n    } else {\r\n      setUser(null);\r\n    }\r\n  }, [authenticated]);\r\n\r\n  return [authenticated, user];\r\n};"]},"metadata":{},"sourceType":"module"}